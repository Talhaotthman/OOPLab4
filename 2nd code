#include <iostream>
#include <cstring>
using namespace std;

class Person {
private:
    char* Name;
    int Age;
    char* countryName;

public:
    // (a) Default constructor with initializer list
    Person() : Name(nullptr), Age(0), countryName(nullptr) {
        Name = new char[8];
        strcpy(Name, "Unknown");

        countryName = new char[8];
        strcpy(countryName, "Unknown");
    }

    // (b) Parameterized constructor
    Person(const char* name, int age, const char* country) : Age(age) {
        Name = new char[strlen(name) + 1];
        strcpy(Name, name);

        countryName = new char[strlen(country) + 1];
        strcpy(countryName, country);
    }

    // (c) Copy constructor (supports shallow and deep copy)
    Person(const Person& other, bool shallowCopy) {
        if (shallowCopy) {
            // Shallow copy — only copy addresses
            Name = other.Name;
            countryName = other.countryName;
            Age = other.Age;
        } else {
            // Deep copy — allocate new memory
            Age = other.Age;

            Name = new char[strlen(other.Name) + 1];
            strcpy(Name, other.Name);

            countryName = new char[strlen(other.countryName) + 1];
            strcpy(countryName, other.countryName);
        }
    }

    // (d) Setters and Getters
    void setName(const char* name) {
        delete[] Name;
        Name = new char[strlen(name) + 1];
        strcpy(Name, name);
    }

    void setAge(int age) { Age = age; }

    void setCountry(const char* country) {
        delete[] countryName;
        countryName = new char[strlen(country) + 1];
        strcpy(countryName, country);
    }

    const char* getName() const { return Name; }
    int getAge() const { return Age; }
    const char* getCountry() const { return countryName; }

    // (e) Destructor
    ~Person() {
        delete[] Name;
        delete[] countryName;
    }

    // (i) Display function (const)
    void display() const {
        cout << "Name: " << Name << ", Age: " << Age
             << ", Country: " << countryName << endl;
    }

    // (f) compareAge function
    static void compareAge(const Person& p1, const Person& p2) {
        cout << "\nComparing ages...\n";
        if (p1.Age > p2.Age) {
            cout << p1.Name << " is older:\n";
            p1.display();
        } else if (p1.Age < p2.Age) {
            cout << p2.Name << " is older:\n";
            p2.display();
        } else {
            cout << "Both have the same age.\n";
        }
    }
};

int main() {
    cout << "Creating Person p1...\n";
    Person p1("Alice", 25, "Canada");
    p1.display();

    // (g) Shallow copy
    cout << "\nCreating Person p2 using shallow copy...\n";
    Person p2(p1, true); // shallow copy
    p2.display();

    // Deep copy
    cout << "\nCreating Person p3 using deep copy...\n";
    Person p3(p1, false); // deep copy
    p3.display();

    cout << "\n--- Modifying p1's details ---\n";
    p1.setName("Bob");
    p1.setAge(30);
    p1.setCountry("USA");

    cout << "\nAfter modification:\n";
    cout << "p1: ";
    p1.display();
    cout << "p2 (Shallow Copy): ";
    p2.display();
    cout << "p3 (Deep Copy): ";
    p3.display();

    // Compare ages
    Person::compareAge(p1, p2);
    Person::compareAge(p1, p3);

    return 0;
}
